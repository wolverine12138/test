<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>平方反比规律</title>
      <link href="/2020/03/30/ping-fang-fan-bi-gui-lu/"/>
      <url>/2020/03/30/ping-fang-fan-bi-gui-lu/</url>
      
        <content type="html"><![CDATA[<p>人们发现电荷有正负两种，而且同性相斥，异性相吸。后来库伦发现了电荷之间相互作用的定量关系，它发现电荷之间的作用力跟距离的平方成反比的。也就是说，如果我把两个电荷之间的距离扩大为原来的两倍，这两个电荷之间的作用力就会减少为原来的四分之一，扩大为三倍就减少为九分之一。</p><p>这个跟引力的效果是一样的，引力也是距离扩大为原来的两倍，引力的大小减少为原来的四分之一。为什么大自然这么偏爱“平方反比”规律呢？因为我们生活在一个各向同性的三维空间里。</p><p>什么意思？我们可以想想：假设现在有一个点源开始向四面八方传播，因为它携带的能量是一定的，那么在任意时刻能量达到的地方就会形成一个球面。而球面的面积公式S=4πr²（r为半径），它是跟半径的平方r²成正比的，这也就是说：我们同一份能量在不同的时刻要均匀的分给4πr²个部分，那么每个点得到的能量就自然得跟4πr²成反比，这就是平方反比定律的更深层次的来源。</p><p>因此，如果我们生活在四维空间里，我们就会看到很多立方（三次方）反比的定律，而这也是科学家们寻找高维度的一个方法。许多理论（比如超弦理论）里都有预言高维度，科学家们就去很小的尺度里测量引力，如果引力在一个很小的尺度里不再遵循平方反比定律，那就很有可能是发现了额外的维度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电机学入门——麦克斯韦方程</title>
      <link href="/2020/03/23/dian-ji-xue-ru-men-mai-ke-si-wei-fang-cheng/"/>
      <url>/2020/03/23/dian-ji-xue-ru-men-mai-ke-si-wei-fang-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>电机学入门第一步，从理解麦克斯韦方程组开始。<br>本文涉及大量公式，没有公式的理解没有灵魂。</p></blockquote><h1 id="麦克斯韦方程组"><a href="#麦克斯韦方程组" class="headerlink" title="麦克斯韦方程组"></a>麦克斯韦方程组</h1><hr><p>&nbsp;&nbsp;要说写麦克斯韦方程组分析的目的，主要是在电机学的书的开篇就碰到了，一方面是为了更深入的理解电机相关的后续公式，另一方面这毕竟是电磁学的基础，甚至可以说是奠基理论，学一学总是没坏处的，还能顺带复习一下高数曲线曲面积分。</p><h2 id="方程组成"><a href="#方程组成" class="headerlink" title="方程组成"></a>方程组成</h2><hr><p>&nbsp;&nbsp;麦克斯韦方程组由四个方程组成：<br>1.高斯定律<br>   该定律描述电场与空间中电荷分布的关系。<br>2.高斯磁定律<br>   该定律表明磁单极子实际不存在。<br>3.法拉第电磁感应定律<br>   该定律描述时变磁场如何感应出电场。<br>4.安培-麦克斯韦定律<br>   该定律阐明，磁场有两种生成方式：一种靠传导电流，即原本的安培定律；另一种靠时变电场或位移电流，即麦克斯韦修正项。</p><h1 id="梯度、散度、旋度"><a href="#梯度、散度、旋度" class="headerlink" title="梯度、散度、旋度"></a>梯度、散度、旋度</h1><hr><p>&nbsp;&nbsp;由于大部分是对场的表述，会涉及大量的相关表征量，此处作为基础知识储备。</p><blockquote><p>其实很多都是抄的数学书啦。<br>为了便于观看，本文除图片外所有向量将使用$\overrightharpoon{v}$而不是<strong>v</strong>的形式。</p></blockquote><h2 id="以流量为例理解对坐标的曲面积分"><a href="#以流量为例理解对坐标的曲面积分" class="headerlink" title="以流量为例理解对坐标的曲面积分"></a>以流量为例理解对坐标的曲面积分</h2><hr><p>&nbsp;&nbsp;设稳定流动的(流速与时间t无关)、不可压缩流体(假设密度为1)的速度场由<br>$$\overrightharpoon{v}(x,y,z)=P(x,y,z)\overrightharpoon{i}+Q(x,y,z)\overrightharpoon{j}+R(x,y,z)\overrightharpoon{k}$$<br>给出,$\Sigma$是速度场中的一片有向曲面，函数P(x,y,z)，Q(x,y,z)，R(x,y,z)都在$\Sigma$上连续，那么我们现在要求<strong>单位时间内流向$\Sigma$指定侧的流体的质量，即流量$\Phi$</strong>。<br>&nbsp;&nbsp;如果流体流过平面上面积为A的一个闭区域，且流体在这闭区域上各点处的流速为常向量$\overrightharpoon{v}$，设$\overrightharpoon{n}$为该平面的单位法向量，那么单位时间内流过这个闭区域的流体组成了一个底面积为A，斜高为|$\overrightharpoon{v}$|的斜柱体，如下图所示。<br><img src="%E6%B5%81%E5%90%91%E6%9B%B2%E9%9D%A2%E4%B8%80%E4%BE%A7%E7%9A%84%E6%B5%81%E9%87%8F.png" alt="流向曲面一侧的流量"><br>&nbsp;&nbsp;此时斜柱体体积为<br>$$A|\overrightharpoon{v}|\cos\theta=A\overrightharpoon{v}\cdot\overrightharpoon{n}$$<br>&nbsp;&nbsp;这即为我们要求的流量$\Phi$。当$\overrightharpoon{v}$与$\overrightharpoon{n}$的夹角为钝角时，$A\overrightharpoon{v}\cdot\overrightharpoon{n}$&lt;0,流量为负值，它表示流体实际流向 -$\overrightharpoon{n}$ 所指一侧(正值)。因此无论$\overrightharpoon{v}$与$\overrightharpoon{n}$的夹角为何值，流体通过闭区域A流向$\overrightharpoon{n}$所指一侧的流量$\Phi$均为$A\overrightharpoon{v}\cdot\overrightharpoon{n}$。<br>&nbsp;&nbsp;当平面区域转化为更为常见的曲面，流速也不再是常向量时，我们就要利用微元法来解决问题。把曲面$\Sigma$分成n小块$\Delta S_i$(同时也表示第i小块的面积)。在$\Sigma$是光滑的和$\overrightharpoon{v}$是连续的前提下，只要$\Delta S_i$的直径很小，我们就可以利用$\Delta S_i$上任一点$(\xi_i,\eta_i.\zeta_i)$处的流速<br>$$\begin{aligned}\overrightharpoon{v_i}&amp;=\overrightharpoon{v}(\xi_i,\eta_i,\zeta_i) \ &amp;=P(\xi_i,\eta_i,\zeta_i)\overrightharpoon{i}+Q(\xi_i,\eta_i,\zeta_i)\overrightharpoon{j}+R(\xi_i,\eta_i,\zeta_i)\overrightharpoon{k}\end{aligned}$$<br>代替小块$\Delta S_i$上其它各点的速度，以该点$(\xi_i,\eta_i.\zeta_i)$处曲面$\Sigma$的单位法向量<br>$$\overrightharpoon{n_i}=\cos\alpha_i\overrightharpoon{i}+\cos\beta_j\overrightharpoon{j}+\cos\gamma_k\overrightharpoon{k}$$<br>代替小块$\Delta S_i$上其它各点处的单位法向量，如下图所示：<br><img src="%E6%B5%81%E5%90%91%E6%9B%B2%E9%9D%A2%E4%B8%80%E4%BE%A7%E7%9A%84%E6%B5%81%E9%87%8F_1.png" alt="流向曲面一侧的流量_1"><br>&nbsp;&nbsp;故<strong>通过$\Delta S_i$流向指定侧的流量的近似值为</strong>：<br>$$\overrightharpoon{v_i}\cdot\overrightharpoon{n_i}\Delta S_i$$<br>将n个小块的流量求和即可，由于<br>$$\begin{aligned}&amp;\cos\alpha_i\cdot\Delta S_i\approx(\Delta S_i)<em>{yz}\&amp;\cos\beta_i\cdot\Delta S_i\approx(\Delta S_i)</em>{zx}\&amp;\cos\gamma_i\cdot\Delta S_i\approx(\Delta S_i)<em>{xy},\end{aligned}$$<br>其中$(\Delta S_i)</em>{xy}$表示$\Delta S_i$在 xOy 面上的投影区域的面积，求和式就可以写做：<br>$$\Phi\approx\displaystyle\sum_{i=1}^n[P(\xi_i,\eta_i,\zeta_i)(\Delta S_i)<em>{yz}+Q(\xi_i,\eta_i,\zeta_i)(\Delta S_i)</em>{zx}+R(\xi_i,\eta_i,\zeta_i)(\Delta S_i)<em>{xy}]$$<br>&nbsp;&nbsp;当各小块曲面的直径的最大值$\lambda \to$ 0取上和式的极限，就得到了$\Phi$的精确值，这也就是<strong>对坐标的曲面积分</strong>的定义，记作$\underset{\Sigma}{\iint}P(x,y,z)dydz+Q(x,y,z)dzdx+R(x,y,z)dxdy$；其中：$\underset{\Sigma}{\iint}P(x,y,z)dydz$称为函数P(x,y,z)在有向曲面$\Sigma$上对坐标y、z的曲面积分，$\underset{\Sigma}{\iint}Q(x,y,z)dzdx$称为函数Q(x,y,z)在有向曲面$\Sigma$上对坐标z、x的曲面积分，$\underset{\Sigma}{\iint}R(x,y,z)dxdy$称为函数R(x,y,z)在有向曲面$\Sigma$上对坐标x、y的曲面积分。此时根据前面的流量推导，曲面侧的选取(法向量的指向)会影响积分的符号。<br>&nbsp;&nbsp;这里可以看到在将各小块曲面直径最大值取极限后，以$(\Delta S_i)</em>{xy}$为例，变成了积分变量dxdy，同样表示该区域在 xOy 面上的投影面积，那么依照投影关系，曲面积分还可以写做：<br>$$\underset{\Sigma}{\iint}R(x,y,z)dxdy=\underset{\Sigma}{\iint}R(x,y,z)\cos\gamma dS$$<br>其它类似。这里$\Sigma$法向量方向取沿z轴正向，即方向余弦为<br>$$\begin{aligned}&amp;\cos\alpha=\dfrac{-z_x}{\sqrt{1+\textstyle z_x^2 +\textstyle z_y^2}} \ &amp; \cos\beta=\dfrac{-z_y}{\sqrt{1+\textstyle z_x^2 +\textstyle z_y^2}} \ &amp; \cos\gamma=\dfrac{1}{\sqrt{1+\textstyle z_x^2 +\textstyle z_y^2}},\end{aligned}$$<br>若法向量方向沿z轴负向，则取相反数。而法向量方向并不影响上面两个曲面积分的等价关系，它只影响曲面积分与二重积分的关系，即<br>$$\begin{aligned}&amp;\underset{\Sigma}{\iint}R(x,y,z)dxdy=\underset{D_{xy}}{\iint}R(x,y,z(x,y))dxdy\space\space\space\space\space\space(\Sigma取上侧)\ &amp; \underset{\Sigma}{\iint}R(x,y,z)dxdy=-\underset{D_{xy}}{\iint}R(x,y,z(x,y))dxdy\space \space\space(\Sigma取下侧)\end{aligned}$$<br>&nbsp;&nbsp;这样我们就得到了对面积的曲面积分与对坐标的曲面积分之间的关系：<br>$$\begin{aligned}&amp; \underset{\Sigma}{\iint}P(x,y,z)dydz+Q(x,y,z)dzdx+R(x,y,z)dxdy \ = &amp; \underset{\Sigma}{\iint}[P(x,y,z)\cos\alpha+Q(x,y,z)\cos\beta+R(x,y,z)\cos\gamma]dS\end{aligned}$$<br>&nbsp;&nbsp;两类曲面积分之间的关系也可以写做向量形式，即<br>$$\underset{\Sigma}{\iint}\overrightharpoon{A}\cdot d\overrightharpoon{S}=\underset{\Sigma}{\iint}\overrightharpoon{A}\cdot\overrightharpoon{n}dS$$<br>或<br>$$\underset{\Sigma}{\iint}\overrightharpoon{A}\cdot d\overrightharpoon{S}=\underset{\Sigma}{\iint}A_ndS$$<br>其中，$\overrightharpoon{A}$=(P,Q,R)，$\overrightharpoon{n}$=$(\cos\alpha,\cos\beta,\cos\gamma)$为某点处单位法向量，$d\overrightharpoon{S}=\overrightharpoon{n}dS=(dydz,dzdx,dxdy)$称为<strong>有向曲面元</strong>，$A_n$为向量$\overrightharpoon{A}$在向量$\overrightharpoon{n}$上的投影。</p><h2 id="通量、散度与高斯公式"><a href="#通量、散度与高斯公式" class="headerlink" title="通量、散度与高斯公式"></a>通量、散度与高斯公式</h2><hr><p>&nbsp;&nbsp;高斯公式表达了空间闭区域上的三重积分与其边界曲面上的曲面积分之间的关系，这个关系可陈述如下：<br><strong>定理1：设空间闭区域$\Omega$是由分片光滑的闭曲面$\Sigma$所围成</strong>(分片光滑的曲面是指由有限个光滑曲面组成的曲面)，<strong>若函数P(x,y,z)、Q(x,y,z)与R(x,y,z)在$\Omega$上具有一阶连续偏导数，则有：</strong><br>$$\underset{\Omega}{\iiint}\bigg(\dfrac{\partial P}{\partial x}+\dfrac{\partial Q}{\partial y}+\dfrac{\partial R}{\partial z}\bigg)dv = \underset{\Sigma}{\oiint}Pdydz+Qdzdx+Rdxdy$$<br>或<br>$$\underset{\Omega}{\iiint}\bigg(\dfrac{\partial P}{\partial x}+\dfrac{\partial Q}{\partial y}+\dfrac{\partial R}{\partial z}\bigg)dv = \underset{\Sigma}{\oiint}(P\cos\alpha+Q\cos\beta+R\cos\gamma)dS$$<br><strong>其中，$\Sigma$是$\Omega$的整个边界曲面的外侧，$\cos\alpha,\cos\beta,\cos\gamma$是$\Sigma$在点(x,y,z)处的法向量的方向余弦</strong>。这两个公式叫做<strong>高斯公式</strong>。<br>&nbsp;&nbsp;设有向量场$\overrightharpoon{F}$(x,y,z)=P(x,y,z)$\overrightharpoon{i}$+Q(x,y,z)$\overrightharpoon{j}$+R(x,y,z)$\overrightharpoon{k}$，其中函数P、Q、R均具有一阶连续偏导数，$\Sigma$是场内的一片有向曲面，$\overrightharpoon{n}$是$\Sigma$在点(x,y,z)处的单位法向量，则积分<br>$$\underset{\Sigma}{\iint}\overrightharpoon{F}\cdot\overrightharpoon{n}dS$$<br>称为向量场$\overrightharpoon{F}$通过曲面$\Sigma$向着指定侧的<strong>通量，flux</strong>(或流量)。<br>&nbsp;&nbsp;高斯公式的<strong>物理意义</strong>：设在闭区域$\Omega$上有稳定流动的、不可压缩的流体(流体密度为1)的速度场<br>$$\overrightharpoon{v}(x,y,z)=P(x,y,z)\overrightharpoon{i}+Q(x,y,z)\overrightharpoon{j}+R(x,y,z)\overrightharpoon{k},$$<br>其中函数P、Q、R均具有一阶连续偏导数，$\Sigma$是闭区域$\Omega$的边界曲面的外侧，$\overrightharpoon{n}$是曲面$\Sigma$在点(x,y,z)处的单位法向量，则可以知道，<strong>单位时间内流体经过曲面$\Sigma$流向指定侧的流体总质量就是</strong><br>$$\underset{\Sigma}{\iint}\overrightharpoon{v}\cdot\overrightharpoon{n}dS=\underset{\Sigma}{\iint}v_ndS=\underset{\Sigma}{\iint}Pdydz+Qdzdx+Rdxdy.$$<br>&nbsp;&nbsp;因此，高斯公式的右端可以解释为速度场$\overrightharpoon{v}$通过闭曲面$\Sigma$流向外侧的通量，即<strong>流体在单位时间内离开闭区域$\Omega$的总质量(假定流体密度为1)</strong>。由于假定流体不可压缩且流动稳定，因此在流体离开区域$\Omega$时，$\Omega$内部必须有产生流体的“源头”产生出同样多的流体来进行补充，故高斯公式左端可解释为<strong>分布在$\Omega$内的源头在单位时间内所产生的流体的总质量</strong>。<br>&nbsp;&nbsp;以闭区域$\Omega$的体积<strong>V</strong>除以高斯公式两端，得：<br>$$\frac{1}{V}\underset{\Omega}{\iiint}\bigg(\dfrac{\partial P}{\partial x}+\dfrac{\partial Q}{\partial y}+\dfrac{\partial R}{\partial z}\bigg)dv = \frac{1}{V}\underset{\Sigma}{\oiint}Pdydz+Qdzdx+Rdxdy=\frac{1}{V}\underset{\Sigma}{\iint}v_ndS$$<br>&nbsp;&nbsp;上式<strong>左端表示$\Omega$内的源头在单位时间单位体积内所产生的流体质量的平均值</strong>。应用积分中值定理于左端，则有：<br>$$\bigg(\dfrac{\partial P}{\partial x}+\dfrac{\partial Q}{\partial y}+\dfrac{\partial R}{\partial z}\bigg)\bigg|_{(\xi,\eta,\zeta)}=\frac{1}{V}\underset{\Sigma}{\iint}v_ndS$$<br>&nbsp;&nbsp;这里$(\xi,\eta,\zeta)$是$\Omega$内的某个点，令$\Omega$缩向一点M(x,y,z)，取上式的极限，则有：<br>$$\dfrac{\partial P}{\partial x}+\dfrac{\partial Q}{\partial y}+\dfrac{\partial R}{\partial z}=\underset{\Omega\to M}{\lim}\dfrac{1}{V}\underset{\Sigma}{\oiint}v_ndS.$$<br>&nbsp;&nbsp;上式左端称为速度场$\overrightharpoon{v}$在点M处的<strong>通量密度</strong>或<strong>散度</strong>，记作div $\overrightharpoon{v}(M)$，即：<br>$$div\space\overrightharpoon{v}(M)=\dfrac{\partial P}{\partial x}+\dfrac{\partial Q}{\partial y}+\dfrac{\partial R}{\partial z}.$$<br>&nbsp;&nbsp;$div\space\overrightharpoon{v}(M)$在这里可以看作稳定流动的不可压缩流体在点M处的<strong>源头强度</strong>。因此我们可以更加精准的总结：<strong>矢量场的散度是指当体积趋向于零时，每单位体积内的矢量向外的净通量。实质上，矢量场的散度表示从一个点出发的场的通量，它指出了在那个点处的合成源。矢量场的散度是一个纯数值</strong>。<br>&nbsp;&nbsp;在$div\space\overrightharpoon{v}(M)$ &gt; 0的点处，流体从该点向外发散，表示流体在该点处有<strong>正源</strong>；在$div\space\overrightharpoon{v}(M)$ &lt; 0的点处(即矢量向外的净通量为负值，这与前面的描述并不矛盾)，流体向该点汇聚，表示流体在该点处有吸收流体的<strong>负源</strong>(又称为<strong>汇</strong>或<strong>洞</strong>)；在$div\space\overrightharpoon{v}(M)$ = 0的点处，表示流体在该点处<strong>无源</strong>。<br>&nbsp;&nbsp;对于一般的向量场$\overrightharpoon{F}$(x,y,z)=P(x,y,z)$\overrightharpoon{i}$+Q(x,y,z)$\overrightharpoon{j}$+R(x,y,z)$\overrightharpoon{k}$，记<br>$$div\space\overrightharpoon{F}=\dfrac{\partial P}{\partial x}+\dfrac{\partial Q}{\partial y}+\dfrac{\partial R}{\partial z}$$<br>为向量场$\overrightharpoon{F}$的散度，此处利用向量微分算子$\nabla$，也可表达为<br>$$div\space\overrightharpoon{F}=\nabla\cdot\overrightharpoon{F}$$<br>&nbsp;&nbsp;若向量场$\overrightharpoon{F}$的散度处处为零，那么称向量场$\overrightharpoon{F}$为<strong>无源场</strong>。<br>&nbsp;&nbsp;利用向量场$\overrightharpoon{F}$的通量和散度，高斯公式可以改写成下面的向量形式：<br>$$\underset{\Omega}{\iiint}div\space \overrightharpoon{F}dv=\underset{\Sigma}{\iint}F_ndS$$<br>或<br>$$\underset{\Omega}{\iiint}\nabla\cdot\overrightharpoon{F}dv=\underset{\Sigma}{\iint}F_ndS$$<br>上式也被称为<strong>散度定理</strong>，它表明，<strong>向量场$\overrightharpoon{F}$通过闭曲面$\Sigma$流向外侧的通量等于向量场$\overrightharpoon{F}$的散度在闭曲面$\Sigma$所围区域$\Omega$上的积分</strong>。或者也可以描述为：<strong>矢量场通过任意闭合曲面向外的总通量等于矢量场的散度在闭合曲面所包围的体积内的积分</strong>。这个定理使得体积分和面积分能够相互转化。</p><blockquote><p>由于涉及了$\nabla$算子，接下来也同样会用到，便简单介绍。</p></blockquote><h3 id="向量微分算子-nabla"><a href="#向量微分算子-nabla" class="headerlink" title="向量微分算子$\nabla$"></a>向量微分算子$\nabla$</h3><hr><p>&nbsp;&nbsp;向量微分算子，或Nabla算子(Nabla Operator)，或劈形算子。其形式化定义为<br>$$\nabla=\dfrac{d}{d\overrightharpoon{r}}$$<br>&nbsp;&nbsp;在n为空间中，分母d$\overrightharpoon{r}$为包含n个分量的向量，故$\nabla$为n维向量算子。以三维空间为例：<br>$$\nabla=\dfrac{\partial}{\partial x}\overrightharpoon{i}+\dfrac{\partial}{\partial y}\overrightharpoon{j}+\dfrac{\partial}{\partial z}\overrightharpoon{k}$$<br>或<br>$$\nabla=(\dfrac{\partial}{\partial x},\dfrac{\partial}{\partial y},\dfrac{\partial}{\partial z})$$<br>&nbsp;&nbsp;严格来说，$\nabla$并不是一个特定的算子，而是一个方便使用的数学符号，$\nabla$作用于不同类型的量，得到的就是不同类型的新量，例如<br>$$\begin{aligned}grad\space f&amp;=\nabla f \div\space \overrightharpoon{v} &amp;=\nabla\cdot\overrightharpoon{v}\curl\space \overrightharpoon{v} &amp;=\nabla\times\overrightharpoon{v}\end{aligned}$$</p><h2 id="环流量、旋度与斯托克斯公式"><a href="#环流量、旋度与斯托克斯公式" class="headerlink" title="环流量、旋度与斯托克斯公式"></a>环流量、旋度与斯托克斯公式</h2><hr><p>&nbsp;&nbsp;斯托克斯公式描述了曲面$\Sigma$上的曲面积分与沿着$\Sigma$的边界曲线的曲线积分之间的关系。这个关系可陈述如下：<br><strong>定理2：设$\Gamma$为分段光滑的空间有向闭曲线，$\Sigma$是以$\Gamma$为边界的分片光滑的有向曲面，$\Gamma$的正向与$\Sigma$的侧符合右手规则(此时称$\Gamma$为有向曲面$\Sigma$的正向边界曲线)，若函数P(x,y,z),Q(x,y,z),R(x,y,z)在曲面$\Sigma$(连同边界$\Gamma$)上具有一阶连续偏导数，则有</strong><br>$$\underset{\Sigma}{\iint}\bigg(\dfrac{\partial R}{\partial y}-\dfrac{\partial Q}{\partial z}\bigg)dydz+\bigg(\dfrac{\partial P}{\partial z}-\dfrac{\partial R}{\partial x}\bigg)dzdx+\bigg(\dfrac{\partial Q}{\partial x}-\dfrac{\partial P}{\partial y}\bigg)dxdy=\oint_\Gamma Pdx+Qdy+Rdz$$<br>&nbsp;&nbsp;该公式称为斯托克斯公式。为了便于记忆，利用行列式记号将斯托克斯公式改为：<br>$$\underset{\Sigma}{\iint}\begin{vmatrix}dydz &amp; dzdx &amp; dxdy \ \dfrac{\partial}{\partial x} &amp; \dfrac{\partial}{\partial y} &amp; \dfrac{\partial}{\partial z} \ P &amp; Q &amp; R\end{vmatrix}=\oint_\Gamma Pdx+Qdy+Rdz$$<br>&nbsp;&nbsp;将其中的行列式按第一行展开，并把$\dfrac{\partial}{\partial y}$与R的积理解为$\dfrac{\partial R}{\partial y}$，其他同理，于是这个行列式就写为定理中的公式左端。<br>&nbsp;&nbsp;利用两类曲面积分之间的关系，可得斯托克斯公式的另一形式：<br>$$\underset{\Sigma}{\iint}\begin{vmatrix}\cos\alpha &amp; \cos\beta &amp; \cos\gamma \ \dfrac{\partial}{\partial x} &amp; \dfrac{\partial}{\partial y} &amp; \dfrac{\partial}{\partial z} \ P &amp; Q &amp; R\end{vmatrix}dS=\oint_\Gamma Pdx+Qdy+Rdz$$<br>&nbsp;&nbsp;其中$\overrightharpoon{n}$=($\cos\alpha,\cos\beta,\cos\gamma$)为有向曲面$\Sigma$在点(x,y,z)处的单位法向量，如果$\Sigma$是 xOy 面上的一块平面闭区域，则斯托克斯公式就变成格林公式，因此格林公式是斯托克斯公式的一种特殊形式。<br>&nbsp;&nbsp;设有向量场$\overrightharpoon{F}$(x,y,z)=P(x,y,z)$\overrightharpoon{i}$+Q(x,y,z)$\overrightharpoon{j}$+R(x,y,z)$\overrightharpoon{k}$，其中函数P、Q、R均连续。$\Gamma$是$\overrightharpoon{F}$定义域内的一条分段光滑的有向闭曲线，$\overrightharpoon{\tau}$是$\Gamma$在点(x,y,z)处的单位切向量，则积分<br>$$\oint_\Gamma\overrightharpoon{F}\cdot\overrightharpoon{\tau}ds$$<br>称为向量场$\overrightharpoon{F}$沿有向闭曲线$\Gamma$的<strong>环流量</strong>。<br>&nbsp;&nbsp;由两类曲线积分之间的关系(后续补充，参照曲面积分即可)，环流量又可表达为<br>$$\oint_\Gamma\overrightharpoon{F}\cdot\overrightharpoon{\tau}ds=\oint_\Gamma\overrightharpoon{F}\cdot d\overrightharpoon{r}=\oint_\Gamma Pdx+Qdy+Rdz$$<br>其中，$d\overrightharpoon{r}=\overrightharpoon{\tau} ds=(dx,dy,dz)$称为<strong>有向曲线元</strong>。类似于由向量场的通量可以引出向量场在一点处的通量密度(散度)一样，<strong>由向量场沿一闭曲线的环流量可以引出向量场在一点处的环量密度或旋度</strong>，它是一个向量，定义如下：<br>&nbsp;&nbsp;设有向量场$\overrightharpoon{F}$(x,y,z)=P(x,y,z)$\overrightharpoon{i}$+Q(x,y,z)$\overrightharpoon{j}$+R(x,y,z)$\overrightharpoon{k}$，其中函数P、Q、R均具有一阶连续偏导数，设有向量场$\overrightharpoon{F}$通过的不闭合曲面$\Sigma$，其边界为闭合曲线$\Gamma$，<strong>则向量场$\overrightharpoon{F}$沿$\Gamma$的环量除以该曲面的面积$\Delta S$，并当曲面面积收缩趋向至0，曲面$\Sigma$变为曲面微分元(可看作某点)时，我们就得到了这一点的环量密度，此时给这环量密度一个方向，使它与向量旋转的方向符合右手法则，成为一个矢量，这样得到的矢量就可以提供向量场在这一点的旋转性质</strong>。数学表述为：<br>$$\begin{aligned}\mathbf{rot}\space \overrightharpoon{F} &amp; =\underset{\Delta S\to 0}{\lim}\dfrac{\oint_\Gamma\overrightharpoon{F}d\overrightharpoon{r}}{\Delta S}\cdot \overrightharpoon{a_n} \ &amp; \ &amp; =\bigg(\dfrac{\partial F_z}{\partial y}-\dfrac{\partial F_y}{\partial z}\bigg)\overrightharpoon{a_x}+\bigg(\dfrac{\partial F_x}{\partial z}-\dfrac{\partial F_z}{\partial x}\bigg)\overrightharpoon{a_y}+\bigg(\dfrac{\partial F_y}{\partial x}-\dfrac{\partial F_x}{\partial y}\bigg)\overrightharpoon{a_z}\end{aligned}$$<br>&nbsp;&nbsp;其中$\overrightharpoon{a_n}$为曲面微分元的单位法向量。同样，这个矢量也可以表示为：<br>$$\bigg(\dfrac{\partial R}{\partial y}-\dfrac{\partial Q}{\partial z}\bigg)\overrightharpoon{i}+\bigg(\dfrac{\partial P}{\partial z}-\dfrac{\partial R}{\partial x}\bigg)\overrightharpoon{j}+\bigg(\dfrac{\partial Q}{\partial x}-\dfrac{\partial P}{\partial y}\bigg)\overrightharpoon{k}$$<br>&nbsp;&nbsp;那么这个矢量称为向量场$\overrightharpoon{F}$的<strong>旋度</strong>，记作$\mathbf{rot}\space \overrightharpoon{F}$或$\mathbf{curl}\space \overrightharpoon{F}$，即<br>$$\mathbf{rot}\space \overrightharpoon{F}=\bigg(\dfrac{\partial R}{\partial y}-\dfrac{\partial Q}{\partial z}\bigg)\overrightharpoon{i}+\bigg(\dfrac{\partial P}{\partial z}-\dfrac{\partial R}{\partial x}\bigg)\overrightharpoon{j}+\bigg(\dfrac{\partial Q}{\partial x}-\dfrac{\partial P}{\partial y}\bigg)\overrightharpoon{k}$$<br>&nbsp;&nbsp;与散度的推导类似，矢量场的旋度是当曲面面积S收缩至零时，矢量场沿包围不闭合曲面的边界的线积分。<strong>实质上，旋度是矢量场关于一个点的合成环流量，它可以表示三维向量场对某一点附近的微元造成的旋转程度。旋度矢量的方向是这一点的合成环量的旋转轴，与向量旋转的方向满足右手法则，而旋度矢量的大小是合成环量与旋转路径所围成的曲面微元面积之比</strong>。<br>&nbsp;&nbsp;利用向量微分算子$\nabla$，向量场$\overrightharpoon{F}$的旋度$\mathbf{rot}\space \overrightharpoon{F}$可表示为$\nabla\times\overrightharpoon{F}$，即<br>$$\mathbf{rot}\space \overrightharpoon{F}=\nabla\times\overrightharpoon{F}=\begin{vmatrix}\overrightharpoon{i} &amp; \overrightharpoon{j} &amp; \overrightharpoon{k} \ \dfrac{\partial}{\partial x} &amp; \dfrac{\partial}{\partial y} &amp; \dfrac{\partial}{\partial z} \ P &amp; Q &amp; R\end{vmatrix}.$$<br>&nbsp;&nbsp;若<strong>向量场$\overrightharpoon{F}$的旋度$\mathbf{rot}\space \overrightharpoon{F}$处处为零，则称向量场$\overrightharpoon{F}$为无旋场</strong>，而<strong>一个无源且无旋的向量场称为调和场</strong>。调和场是物理学中一类重要的向量场，它与调和函数有着密切的联系。<br>&nbsp;&nbsp;设斯托克斯公式中的有向曲面$\Sigma$在点(x,y,z)处的单位法向量为<br>$$\overrightharpoon{n}=\cos\alpha\overrightharpoon{i}+\cos\beta\overrightharpoon{j}+\cos\gamma\overrightharpoon{k}$$<br>&nbsp;&nbsp;则<br>$$\mathbf{rot}\space \overrightharpoon{F}\cdot\overrightharpoon{n}=\nabla\times\overrightharpoon{F}\cdot\overrightharpoon{n}=\begin{vmatrix}\cos\alpha &amp; \cos\beta &amp; \cos\gamma \ \dfrac{\partial}{\partial x} &amp; \dfrac{\partial}{\partial y} &amp; \dfrac{\partial}{\partial z} \ P &amp; Q &amp; R\end{vmatrix}$$<br>&nbsp;&nbsp;于是，斯托克斯公式可以写为向量形式，即<br>$$\underset{\Sigma}{\iint}\mathbf{rot}\space \overrightharpoon{F}\cdot\overrightharpoon{n}dS=\oint_\Gamma\overrightharpoon{F}\cdot\overrightharpoon{\tau}ds$$<br>或<br>$$\underset{\Sigma}{\iint}(\mathbf{rot}\space\overrightharpoon{F})_ndS=\oint_\Gamma\overrightharpoon{F}_\tau ds$$<br>&nbsp;&nbsp;上式表示向量场$\overrightharpoon{F}$沿有向闭曲线$\Gamma$的环流量等于向量场$\overrightharpoon{F}$的旋度通过曲面$\Sigma$的通量，这里$\Gamma$的正向应与$\Sigma$的侧符合右手规则。这使得面积分与线积分之间得以相互转化。<br>&nbsp;&nbsp;这里给出了从力学角度对旋度$\mathbf{rot}\space\overrightharpoon{F}$的解释：<br>&nbsp;&nbsp;设有刚体绕定轴 <em>L</em> 转动，角速度为 $\omega$ ，<em>M</em> 为刚体内任意一点，在定轴 <em>L</em> 上任取一点 <em>O</em> 为坐标原点，作空间直角坐标系，使 z 轴与定轴 <em>L</em> 重合，则 $\overrightharpoon{\omega}=\omega\overrightharpoon{k}=(0,0,\omega)$ ，而点 <em>M</em> 可用向量$\overrightharpoon{r}=\overrightharpoon{OM}=(x,y,z)$来确定，则可知点 <em>M</em> 的线速度$\overrightharpoon{v}$可表示为(注意角速度方向与线速度方向满足右手法则)<br>$$\overrightharpoon{v}=\overrightharpoon{\omega}\times\overrightharpoon{r}$$<br>&nbsp;&nbsp;由此有：<br>$$\overrightharpoon{v}=\begin{vmatrix}\overrightharpoon{i} &amp; \overrightharpoon{j} &amp; \overrightharpoon{k} \ 0 &amp; 0 &amp; \omega \ x &amp; y &amp; z\end{vmatrix}=(-\omega y,\omega x,0)$$<br>&nbsp;&nbsp;而线速度的旋度<br>$$\mathbf{rot}\space\overrightharpoon{v}=\begin{vmatrix}\overrightharpoon{i} &amp; \overrightharpoon{j} &amp; \overrightharpoon{k} \ \dfrac{\partial}{\partial x} &amp; \dfrac{\partial}{\partial y} &amp; \dfrac{\partial}{\partial z} \ -\omega y &amp; \omega x &amp; 0\end{vmatrix}=(0,0,2\omega)=2\overrightharpoon{\omega}$$<br>&nbsp;&nbsp;可以看到速度场的旋度与刚体角速度的关系，同方向且成二倍关系，若考虑转动惯量，速度场的旋度与角加速度也有类似的关系。<br>&nbsp;&nbsp;</p><blockquote><p>那么接下来就从电磁学的角度解释散度与旋度等场的表征量。</p></blockquote><h1 id="高斯定律"><a href="#高斯定律" class="headerlink" title="高斯定律"></a>高斯定律</h1><hr><h2 id="静电学高斯定律"><a href="#静电学高斯定律" class="headerlink" title="静电学高斯定律"></a>静电学高斯定律</h2><hr><p>&nbsp;&nbsp;在这里要说的高斯定律其实就是在静电场与磁场中去分别解释物理世界。前面已经引入了高斯公式，在电磁学中主要用到的是通量形式，即前面提到的通过曲面的通量等于散度在该区域内的积分。而散度其实就是通量密度，在定义中可以看到是将产生通量的场缩向了一点，故我们理解为辐射能量或吸收能量的一个<strong>源</strong>。那么在静电场中，这个源就是某一个电荷，它激发电场，产生电通量。我们知道这样的规律：<strong>通过一个闭合曲面的电通量是和这个曲面内包含的电荷总量成正比的</strong>，这就是静电场中的高斯定律的解释，即真空条件下：<br>$$\Phi=\oiint_S\overrightharpoon{E}\cdot d\overrightharpoon{S}=\dfrac{1}{\varepsilon_0}\displaystyle\sum_{i=1}^n q_i=\oiiint_V \rho_0dV\space\space\space\space(1-1)$$<br>&nbsp;&nbsp;这反映了静电场是有源场，或者叫散度场，其源为电荷。在静电场中，通过任意闭合曲面的电通量，等于该闭合曲面所包围的电荷的代数和的$\dfrac{1}{\varepsilon_0}$倍，而与闭合曲面外的电荷无关，与闭合曲面内的电荷位置分布无关。这里的$\varepsilon$为真空电容率或真空介电常数，$\rho_0$为该处电荷密度即对应的散度(当然如果此处电荷密度并不均匀，或者有体积形状影响而不能等效为质点，都应该将$\rho_0$看作密度函数)。静电场还有其他的性质(库仑定律、场强的矢量叠加原理等)，这里就不再细说。</p><blockquote><p>此处的高斯定律与库仑定律引出了物理世界的一个规律：平方反比规律，有空分析一下。</p></blockquote><p>&nbsp;&nbsp;式(1-1)即麦克斯韦方程组积分形式的第一个式子。当不是真空条件，电介质极化后产生的极化电荷改变了原来的电场分布，于是上式变成：<br>$$\Phi=\oiint_S\overrightharpoon{D}\cdot d\overrightharpoon{S}=\dfrac{1}{\varepsilon_0}\displaystyle\sum (q_0+q_p)\space\space\space\space(*)$$</p><blockquote><p>这里下面的推导可能有些问题，涉及一些极化强度和电荷密度的问题，还有对电位移的理解，现在没必要抠那么细，留待后续补充吧。</p></blockquote><p>&nbsp;&nbsp;<strong>式(*)表示非真空静电场中任意闭合曲面的电位移通量等于该曲面内的自由电荷的代数和</strong>。两边同时除以该处区域体积并取极限(求散度的操作)，等式左边变为场的散度，等式右边变为电荷密度，即：<br>$$\nabla\cdot\overrightharpoon{E}=\dfrac{1}{\varepsilon_0}(\rho_0+\rho_p)\space\space\space\space(<strong>)$$<br>&nbsp;&nbsp;进一步引入概念</strong>电位移矢量<strong>，</strong>记作$\overrightharpoon{D}$<strong>，有<br>$$\overrightharpoon{D}=\varepsilon_0\overrightharpoon{E}+\overrightharpoon{P}$$<br>&nbsp;&nbsp;其中$\overrightharpoon{P}$为</strong>电极化强度<em><em>，则式(\</em>\</em>)就变为<br>$$\nabla\cdot\overrightharpoon{D}=\rho_0\space\space\space\space(2-1)$$<br>&nbsp;&nbsp;式(2-1)即静电学高斯定律的微分形式，也是麦克斯韦方程组微分形式的第一个式子，表示电位移的散度等于该点电荷密度。</p><h2 id="高斯磁定律"><a href="#高斯磁定律" class="headerlink" title="高斯磁定律"></a>高斯磁定律</h2><hr><p>&nbsp;&nbsp;在磁场中，高斯定律的解释出现了本质的区别，无论在稳恒磁场还是时变磁场下，由于磁力线都是闭合的，任何一条磁力线进入某个闭合曲面，必然会从闭合曲面内部出来，在某处形成闭合，那么由于通量在侧的方向选择不同符号不同的条件下，一定会有磁通量正负相抵，即：<br>$$\Phi=\oiint_S\overrightharpoon{B}\cdot d\overrightharpoon{S}=0\space\space\space\space(1-2)$$<br>&nbsp;&nbsp;对应的微分形式为：<br>$$\nabla\cdot\overrightharpoon{B}=0\space\space\space\space(2-2)$$<br>&nbsp;&nbsp;因此，磁场中的高斯定理说明了自然界<strong>不存在磁单极子</strong>，磁场为无源场，磁感线(磁力线)都是无头无尾的闭合曲线；磁场量可以由源电流的瞬时值唯一确定，因而磁场随时间的变化直接跟随源电流的时间变化。<br>&nbsp;&nbsp;</p><h1 id="法拉第电磁感应定律"><a href="#法拉第电磁感应定律" class="headerlink" title="法拉第电磁感应定律"></a>法拉第电磁感应定律</h1><hr><p>&nbsp;&nbsp;法拉第电磁感应定律是描述<strong>磁生电</strong>的物理规律，这个大多数人耳熟能详，也知道那个最简单的实验：放置两块分别为N、S极的永磁体，它们中间会形成大致平行的磁感线束，那么用一个金属棒在它们中间作切割磁感线运动，此时可以测得金属棒两端产生了电流。如果金属棒不动，而去改变磁场强度或磁场分布，同样能使金属棒两端产生电流。<br>&nbsp;&nbsp;这个实验的过程，实际上可以看作在改变两个物理量，一个是磁感线通过回路的面积，一个是磁场强度，而它们的矢量点积就是回路的磁通量。因此电磁感应定律可以描述为：<strong>若通过回路(曲面)的磁通量发生了改变，回路中就会产生电路，且磁通量改变的越快，产生的电流越大</strong>。注意这里的曲面一定不是闭曲面，由高斯磁定律我们知道通过闭曲面的磁通量一定为0，那么一定无法产生电流。</p><blockquote><p>感生、动生、感应的关系以及感生与动生本质是否一样，还需进一步分析。</p></blockquote><p>&nbsp;&nbsp;这里的产生的电流要如何描述呢？定律已经说明了，这个过程叫感应，产生的电流叫感应电流，产生的电动势叫感应电动势。这个在高中已经学的很明白了，而且还有叫法上的区分：通过前面的实验能得知，感应电流来源有两种，那么称导体切割磁感线运动产生的电流(电动势)为动生电流(电动势)；称改变磁通量得到的电流(电动势)为感生电流(电动势)。<br>&nbsp;&nbsp;下面统一称磁通量改变而激发的电场为感生电场。感生电场又被称为涡旋电场，可以用围绕在磁感线周围的、闭合的电场线描述，与静电场有区别。涡旋电场被定义为随时间变化着的磁场在其周围空间激发的一种电场，能够对处于其中的带电粒子施以力的作用。<strong>涡旋电场是非保守场即非势场，涡旋电场力是导致感应电动势的非静电力</strong>。</p><blockquote><p>涉及保守场(无旋场且第二类曲线积分与路径无关)、无旋场、有势场等概念区分，后面会在其他文章中讨论，这里就不再详细展开。<br>并且涡旋电场只是一种虚拟描述，实际并不存在，只是洛伦兹力的一种反映，这一点也还需要进一步分析。</p></blockquote><p>&nbsp;&nbsp;那么在磁感线束周围感生出了涡旋电场，而涡旋电场又对处于其中的带电粒子施以力的作用，这时就又要提及电动势的定义：电动势的大小等于非静电力把单位正电荷从电源负极经过电源内部移到电源正极所做的功。而在涡旋电场中，电动势emf我们可以这样去描述：假设涡旋电场中有闭合回路C，则<br>$$emf=\oint_C\overrightharpoon{E}\cdot d\overrightharpoon{l}$$<br>&nbsp;&nbsp;其单位是伏特(V)。其中$d\overrightharpoon{l}=\overrightharpoon{\tau}ds$是曲线C的有向曲线元，$\overrightharpoon{E}$为电场强度矢量(单位为伏特/米)。<strong>emf是不为0的，这里也验证了涡旋电场为非势场，即它沿闭合曲线的环量不为零。在有势场中，例如静电场，沿任意闭合曲线的环量均为0(静电场为无旋场)</strong>。根据法拉第电磁感应定律，这个电动势由磁通量的时间变化率决定：<br>$$\oint_C\overrightharpoon{E}\cdot d\overrightharpoon{l}=-\dfrac{\partial}{\partial t}\iint_S\overrightharpoon{B}\cdot d\overrightharpoon{S}\space\space\space\space(1-3)$$<br>&nbsp;&nbsp;这便是麦克斯韦方程组积分形式的第三个式子。其中S为穿过闭合回路C所包围的不闭合曲面。注意磁通量实际上是关于(x,y,z,t)的变化量，故这里需要用偏微分。这里的负号反映的是楞次定律的内容，它表明<strong>回路中所产生的感应电动势的极性，总是使产生的感应电流$i_{induced}$所再产生的磁感应强度$\overrightharpoon{B}_{induced}$，趋向于阻碍原磁感应强度$\overrightharpoon{B}$的任何变化</strong>。也是自然界经典负反馈的体现。<br>&nbsp;&nbsp;对上式应用斯托克斯公式即可得到电磁感应定律的微分形式(2-3)：<br>$$\nabla\times\overrightharpoon{E}=-\dfrac{\partial\overrightharpoon{B}}{\partial t}\space\space\space\space(2-3)$$<br>&nbsp;&nbsp;代入求旋度的结果，则有：<br>$$\begin{aligned} &amp; \bigg(\dfrac{\partial\overrightharpoon{E}_z}{\partial y}-\dfrac{\partial\overrightharpoon{E}_y}{\partial z}\bigg)\overrightharpoon{a}_x+\bigg(\dfrac{\partial\overrightharpoon{E}_x}{\partial z}-\dfrac{\partial\overrightharpoon{E}_z}{\partial x}\bigg)\overrightharpoon{a}_y+\bigg(\dfrac{\partial\overrightharpoon{E}_y}{\partial x}-\dfrac{\partial\overrightharpoon{E}_x}{\partial y}\bigg)\overrightharpoon{a}_z \ &amp; \ = &amp; -\dfrac{\partial\overrightharpoon{B}_x}{\partial t}\overrightharpoon{a}_x-\dfrac{\partial\overrightharpoon{B}_y}{\partial t}\overrightharpoon{a}_y-\dfrac{\partial\overrightharpoon{B}_z}{\partial t}\overrightharpoon{a}_z\end{aligned}$$<br>&nbsp;&nbsp;匹配各分量，则有：<br>$$\begin{aligned} &amp; \dfrac{\partial\overrightharpoon{E}_z}{\partial y}-\dfrac{\partial\overrightharpoon{E}_y}{\partial z}=-\dfrac{\partial\overrightharpoon{B}_x}{\partial t} \ &amp; \dfrac{\partial\overrightharpoon{E}_x}{\partial z}-\dfrac{\partial\overrightharpoon{E}_z}{\partial x}=-\dfrac{\partial\overrightharpoon{B}_y}{\partial t} \ &amp; \dfrac{\partial\overrightharpoon{E}_y}{\partial x}-\dfrac{\partial\overrightharpoon{E}_x}{\partial y}=-\dfrac{\partial\overrightharpoon{B}_z}{\partial t}\end{aligned}$$</p><h1 id="安培-麦克斯韦定律"><a href="#安培-麦克斯韦定律" class="headerlink" title="安培-麦克斯韦定律"></a>安培-麦克斯韦定律</h1><hr><p>&nbsp;&nbsp;法拉第电磁感应定律表明时变磁场能够产生或感应出电场，而安培定律表明反之也是正确的，即：<strong>时变电场能够产生或感应出磁场</strong>。在这里都说麦克斯韦是对安培定律进行了修正，我们就开一小章说一下修正了什么。当然，直接理解安培-麦克斯韦定律也不会漏下什么。</p><h2 id="麦克斯韦对安培定律修正了什么"><a href="#麦克斯韦对安培定律修正了什么" class="headerlink" title="麦克斯韦对安培定律修正了什么"></a>麦克斯韦对安培定律修正了什么</h2><hr><p>&nbsp;&nbsp;</p><h2 id="定律阐述"><a href="#定律阐述" class="headerlink" title="定律阐述"></a>定律阐述</h2><hr><p>&nbsp;&nbsp;安培-麦克斯韦定律的主要思想是：<strong>穿过曲面的电流或者变化的电通量会产生沿曲面边界的环绕磁场</strong>。数学表述为：<br>$$\oint_C\overrightharpoon{B}\cdot d\overrightharpoon{l}=\mu_0\bigg(I_{enc}+\varepsilon_0\dfrac{d}{dt}\iint_S\overrightharpoon{E}\cdot\overrightharpoon{n}dS\bigg)\space\space\space\space(<strong>*)$$<br>&nbsp;&nbsp;上式是真空中的安培-麦克斯韦定律表述，其中$\mu_0$为真空磁导率，$I_{enc}$为穿过曲面、被边界包围的电流，$\varepsilon_0$为真空电容率。等式左侧为沿某一路径C的磁场环量，这个磁场环量即该闭合路径的</strong>磁动势(mmf)**，它正比于这个路径C所包围的电流和以此路径为边界的任意曲面S的电通量变化率。如果要用它来确定磁场强度矢量的值，还需要将$\overrightharpoon{B}$从点积和积分中提出来，要选择合适的安培环路。<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><hr><p>&nbsp;&nbsp;其实我是没想到分析一个麦克斯韦方程组，会牵出这么多东西，而且许多介绍方程组的文章彼此并不统一，公式写法多样，引入方式也极具多样化，导致很多初学者会很懵。这中间我搞来了好多本书、论文参考，方程组本身写起来很简单，但是如果想要将每一个涉及的点都详细展开，那将会写出一本厚厚的书，尤其是夹带了数学背景的前提下，简单的几个方程就变得极其复杂化。我写到这里就已经感觉不能继续深究下去了，电磁学、电磁场与电磁波、电动力学、场论、矢量分析……后面还会涉及的越来越多，这里是写不完的，毕竟我只是为了理解电机的几个公式，有些内容留待之后在其他文章中补充吧。</p>]]></content>
      
      
      <categories>
          
          <category> 电机 </category>
          
          <category> 电机学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 麦克斯韦方程组 </tag>
            
            <tag> 曲线曲面积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在建立静态博客时都遇到了什么（二）</title>
      <link href="/2020/02/16/wo-zai-jian-li-jing-tai-bo-ke-shi-du-yu-dao-liao-shi-me-er/"/>
      <url>/2020/02/16/wo-zai-jian-li-jing-tai-bo-ke-shi-du-yu-dao-liao-shi-me-er/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>搭好环境后其实已经可以开始写作了，但总会遇到新的小毛病或者又想添加新的插件，这一篇就是对后续内容的补充，不定期更新。</li><li>现在想要添加的是对ssh公钥配置、转义字符与数学公式渲染的彻底解决、hexo server为什么要重设端口、网页模板的结构（没整明白呢）以及对ejs如何去编辑修改、由前者带来的现在博客缺少的categories如何添加以及文章侧边content如何定位的问题、valine评论系统的添加（没整出来呢）、页面加速以及询查是什么拖慢了我的网页，可能后续还会想加入新的东西。</li><li>我并不是一个前端开发者，这些东西搞多了给我带来的影响也很微妙，所以，随缘更，随缘更。</li></ul></blockquote><h1 id="亿点点小问题（二）"><a href="#亿点点小问题（二）" class="headerlink" title="亿点点小问题（二）"></a>亿点点小问题（二）</h1><hr><h2 id="ssh以及公钥的配置"><a href="#ssh以及公钥的配置" class="headerlink" title="ssh以及公钥的配置"></a>ssh以及公钥的配置</h2><hr>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在建立静态博客时都遇到了什么</title>
      <link href="/2020/02/09/wo-zai-jian-li-jing-tai-bo-ke-shi-du-yu-dao-liao-shi-me/"/>
      <url>/2020/02/09/wo-zai-jian-li-jing-tai-bo-ke-shi-du-yu-dao-liao-shi-me/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>为了让我第一个有意义的域名有意义，我决定折腾一个自己的博客，也是记录下我自己的踩坑经历。</li><li>五块钱买的域名和一整套免费的服务让我找到了Hexo的组织，使用Hexo + Coding + GitHub，这样的访问速度无论在哪都让人安逸。</li><li>踩坑都在意料之中，填坑也没那么喜出望外，搞完这些也没觉得学习了些啥，不过嘛，人生在于折腾！</li></ul></blockquote><h1 id="配环境"><a href="#配环境" class="headerlink" title="配环境"></a>配环境</h1><hr><p>前面都是基操，安装Node.js 、npm 、Hexo什么的，初始化之后就可以在本地看到Hexo原味主题landscape的页面了。然后把这个页面模板挂到coding上去，coding有个静态页面的服务，部署后就OK了。</p><blockquote><p>PS：以前叫Pages服务，现在已经改名了，顺带一提的是，coding的帮助页面已经移走了，从现在coding的官网进帮助页面，里面的内容才是有效的，不知为何，以前的帮助页面仍然保留了下来，所以百度搜出来的某些 “官方配置教程” 现在已经找不到对应的服务了，里面的内容已经过时了。<br><a href="https://help.coding.net/" target="_blank" rel="noopener">https://help.coding.net/</a><br>这个才是现在官方的、有效的帮助页面。</p></blockquote><hr><h2 id="基操部分"><a href="#基操部分" class="headerlink" title="基操部分"></a>基操部分</h2><hr><p>我的环境均为win10，先安装Node.js</p><blockquote><ol><li><a href="https://github.com/jasongin/nvs/" target="_blank" rel="noopener">https://github.com/jasongin/nvs/</a>   NVS安装</li><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>   官网安装</li></ol></blockquote><p>然后就可以用npm了，以下是在git bash命令行里操作的</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><blockquote><p>PS：Hexo官网说安装完之后，可以使用以下两种方式执行Hexo：</p><ol><li><code>npx hexo &lt;command&gt;</code></li><li>将Hexo所在的目录下的<code>node_modules</code>添加到环境变量之中即可直接使用<code>hexo &lt;command&gt;</code>：<pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'PATH="<span class="token variable">$PATH</span>:./node_modules/.bin"'</span> <span class="token operator">>></span> ~/.profile</code></pre>然而我一开始还是第一种办法<code>npx hexo &lt;command&gt;</code>尝试成功与否，后来就能直接<code>hexo &lt;command&gt;</code>的去用了，也没别的操作就直接可以了……</li></ol></blockquote><p>然后就可以进行初始化了！找一个空文件夹，在里面打开git bash：</p><pre class=" language-bash"><code class="language-bash">$ hexo init$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>或者：</p><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>完成之后，就会出现这样的目录结构：</p><pre><code>.├── _config.yml   //网站配置信息文件，可以在此配置大部分参数，以及插件的参数├── package.json  //应用程序的信息，可以在此看到你安装的插件或你的依赖├── scaffolds     //模板文件夹，修改其中的内容后，每次新建的文章或其它的什么都会包含这个修改├── source        //资源文件夹|   ├── _drafts|   └── _posts└── themes        //主题，默认的有一个landscape主题文件夹</code></pre><p>现在只需要改一下<code>_config.yml</code>里的theme配置：</p><pre><code>theme: landscape</code></pre><p>在<code>hexo init</code>的文件夹下git bash，运行三连命令：</p><pre><code>$ hexo clean$ hexo g$ hexo s</code></pre><p>然后按照提示就可以在 localhost:4000 的链接地址里看到页面效果了。此时要部署到coding上还需要在coding下新建代码仓库，设置部署ssh，然后复制这个项目的git地址，如图：<br><img src="ssh_git.png" alt="ssh git 地址"><br>然后在<code>_config.yml</code>里面修改部署配置：</p><pre><code>deploy:  type: git  repository: git@e.coding.net:……//上面复制的git地址  branch: master                 //部署到的分支，与coding静态页面配置的触发机制要一致</code></pre><p>如果想同时挂到GitHub，这里的部署配置可以改为：</p><pre><code>repository:          //或者为repo:   coding: git@…………  github: git@…………</code></pre><p>这里以<code>git@…………</code>的形式部署的都是用SSH方式部署，有关SSH设置的部分见@@@@。做完这些以后就可以部署了，三连命令又多了一个：</p><pre class=" language-bash"><code class="language-bash">$ hexo d</code></pre><p>这样，如果你绑定了自己的域名，就可以在自己的域名看到你做的网页了，安逸。</p><hr><h2 id="自定义部分"><a href="#自定义部分" class="headerlink" title="自定义部分"></a>自定义部分</h2><hr><blockquote><ul><li>虽然我觉得landscape主题其实挺好看的，而且也确实不错，但是未免显得自己太low，于是换主题成了必需步骤，我选择的主题的原版是<a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Hux Blog</a>，不过这个不是用Hexo做的，被kaijun用Hexo移植，后又经YuHsuan更改并改名叫BeanTech，被推到了Hexo官方主题推荐上，挺靠前的，被我相中了 ：）</li><li>但是问题在于用Hexo做的几个兄弟都已经不再维护这个主题了，就导致里面很多插件都过时了，或者存在一些小问题，不过无碍，这个主题风格的整体设计盖过了这些小瑕疵，我觉得这个设计比Next强多了 ：）</li></ul></blockquote><p>   用这个主题首先的问题是，你git下来的文件夹目录，<strong>本身就是一个初始化后的完整Hexo目录，不是那种主题文件夹</strong>，所以你要是把这个目录放到自己init后的目录下的<code>themes</code>里面，你无论如何也得不到正常的网页，所以，挑完主题<code>git clone</code>以后先看看这个<strong>目录结构</strong>，这样就很稳。<br>   git下来之后在目录第一层下执行<code>npm install</code>安装所需要的依赖，这里对于网络要求其实不高，有网速就行，不需要加BUFF。可能过程中有些小问题，后面再说。<br>   这个git下来的目录第一层下有个<code>_config.yml</code>，这里的配置是接下来重点关注的地方。先修改这里的<strong>theme</strong>，看看这里的配置与目录下<code>themes</code>文件夹里的主题文件夹名是否相同，若不同，按后者修改。然后修改<code>_config.yml</code>里的<strong>deploy</strong>配置，与上文相同。然后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>三连应该就可以看到目标网页了！当然也可以先<code>hexo s</code>在本地先试试。</p><hr><h2 id="修改网页参数以及部分模板"><a href="#修改网页参数以及部分模板" class="headerlink" title="修改网页参数以及部分模板"></a>修改网页参数以及部分模板</h2><hr><p>后续补充。</p><hr><h1 id="亿点点小问题"><a href="#亿点点小问题" class="headerlink" title="亿点点小问题"></a>亿点点小问题</h1><hr><blockquote><p>踩坑、填坑记录。</p></blockquote><hr><h2 id="npm-安装依赖问题"><a href="#npm-安装依赖问题" class="headerlink" title="npm 安装依赖问题"></a>npm 安装依赖问题</h2><hr><p>首先网速可能会出问题，但是一般情况都OK，不行就换热点，这里其实不用加BUFF。能顺利去下载插件以后，就迎来了各种奇妙的小问题们。<br>在下面的内容中，插件、依赖、包、软件包，在某种意义上讲，它们是相同的东西。</p><blockquote><p>npm相关操作，请参阅<a href="https://www.npmjs.cn/" target="_blank" rel="noopener">npm中文文档</a></p></blockquote><h3 id="各种-WARN-deprecated"><a href="#各种-WARN-deprecated" class="headerlink" title="各种 WARN deprecated"></a>各种 WARN deprecated</h3><hr><p>安装过程中，如果你的主题长时间没有人维护（比如我这个，Hexo移植版就没人管），那么很大概率在执行<code>npm install</code>时遇到这样的情况（这里仅作示范，我原来的警告已经出不来了）：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> WARN deprecated core-js@1.2.7: core-js@<span class="token operator">&lt;</span>2.6.8 is no longer maintained. Please, upgrade to core-js@3 or at least to actual version of core-js@2</code></pre><p><strong>deprecated</strong>是被废弃的意思，由于时间太久，你所使用的主题所需要的<strong>某个版本的依赖</strong>可能已经做出重大更新以至于必须装某一版，又或是可能已经被移到另一个名字的依赖下，又或是可能已经被删除不用，又或是你安装不了（平台不符），又或是由于前面种种可能原因而导致的某个前置依赖没有安装，等等。这些都会导致出现这样的<code>npm WARN deprecated ******</code>的提示，而由<a href="https://www.npmjs.cn/" target="_blank" rel="noopener">npm中文文档</a>得知，如果你是某个包的所有者，你可以通过<code>npm deprecate &lt;pkg&gt;[@&lt;version&gt;] &lt;message&gt;</code>去更新npm注册表中指定包所对应的数据条目，为尝试安装它的所有人提示版本作废的警告信息。<br>这个时候我们的选择有这样几种：</p><ul><li><ol><li>依照提示，需要升级的就升级，要把某个插件升级到指定版本，可以使用这样的命令：<pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>pkg<span class="token operator">></span>@<span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token punctuation">[</span>--save<span class="token punctuation">]</span></code></pre></li></ol></li><li>若不指定版本，则默认更新到最新版（latest），install 可以简写为 i 。在npm中文文档中对于这里的安装指令的flag有着更多的解释，具体以其为准，我这里的可能已经过时了。<code>--save</code>表示将这个包及其版本号添加到<code>package.json</code>或<code>package-lock.json</code>里的依赖配置中，在npm中文文档中对此也有着新的解释。</li><li>又或者使用：<pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>pkg<span class="token operator">></span>@latest  //更新到最新版</code></pre></li><li>不过更新到最新版的命令最好慎用，新版本有没有新的未知未解决的BUG谁也不知道，如果你不想做先驱者，可以选前者，按照命令行给的提示安装固定版本的插件。</li><li><ol start="2"><li>按照提示需要安装别的什么前置插件，或者是此插件已经被移到别的插件下、需要安装后者，这样的情况就安装新插件就好了，方法同上。</li></ol></li><li><ol start="3"><li>对于某些提示：此插件（包）的某个功能被去掉，此插件已经不再存在，等类似提示，可直接忽略，或者把这条依赖在应用程序信息文件<code>package.json</code>中直接删掉，反正不存在了你怎么也用不了，直接删了就行。</li></ol></li><li><ol start="4"><li>有这样一条命令：<pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> update <span class="token punctuation">[</span>-g<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>pkg<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>  //更新包</code></pre></li></ol></li><li><code>-g</code>是全局的意思（global），如果你添加了这个flag，并且后面没有指定包名，那么<code>package.json</code>将会被修改，并保存所有依赖最低所需的新版本（从<a href="mailto:npm@5.0.0" target="_blank" rel="noopener">npm@5.0.0</a>开始）。update 也可以简写为up或另写为upgrade 。其他情况见npm中文文档。不过这个命令也是要慎用，有些不需要更新的包保留即可，我们只要把报错与警告全部解决就行，没必要全都升级。</li></ul><h3 id="npm-ERROR"><a href="#npm-ERROR" class="headerlink" title="npm ERROR"></a>npm ERROR</h3><hr><p>这个情况挺多的，我遇到的只是某个重要依赖没有安装或者运行后续安装脚本（postinstall script）失败，按照上面的步骤安了就行了，其他的按照提示来吧，npm给的提示还是挺全的。ERROR属于必须解决的内容。</p><h3 id="npm-WARN-SKIPPING-OPTIONAL-DEPENDENCY"><a href="#npm-WARN-SKIPPING-OPTIONAL-DEPENDENCY" class="headerlink" title="npm WARN  SKIPPING OPTIONAL DEPENDENCY"></a>npm WARN  SKIPPING OPTIONAL DEPENDENCY</h3><hr><p>这个意思是选择性跳过的依赖没有安装从而带来的警告，这个我不知道有没有其它的可能性，但是我这里出现的情况，是因为平台不符而导致的，具体如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 <span class="token punctuation">(</span>node_modules\fsevents<span class="token punctuation">)</span>:<span class="token function">npm</span> WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="token keyword">for</span> fsevents@1.2.11: wanted <span class="token punctuation">{</span><span class="token string">"os"</span><span class="token keyword">:</span><span class="token string">"darwin"</span>,<span class="token string">"arch"</span><span class="token keyword">:</span><span class="token string">"any"</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>current: <span class="token punctuation">{</span><span class="token string">"os"</span><span class="token keyword">:</span><span class="token string">"win32"</span>,<span class="token string">"arch"</span><span class="token keyword">:</span><span class="token string">"x64"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">npm</span> WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 <span class="token punctuation">(</span>node_modules\hexo-deployer-git\node_modules\fsevents<span class="token punctuation">)</span>:<span class="token function">npm</span> WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="token keyword">for</span> fsevents@2.1.2: wanted <span class="token punctuation">{</span><span class="token string">"os"</span><span class="token keyword">:</span><span class="token string">"darwin"</span>,<span class="token string">"arch"</span><span class="token keyword">:</span><span class="token string">"any"</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>current: <span class="token punctuation">{</span><span class="token string">"os"</span><span class="token keyword">:</span><span class="token string">"win32"</span>,<span class="token string">"arch"</span><span class="token keyword">:</span><span class="token string">"x64"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我这里出现这些的原因是，这些都是macOS上的包，我是win10环境，当然安装不了，具体带来了什么影响我也不知道，因为我到现在也没看出来，所以这几个警告实际可以忽略，如果你不想看到它们，你也可以在它们被配置的地方，把它们删掉，这个操作挺麻烦的，我懒得做就一直带着这些警告了。</p><h3 id="vulnerabilities-high、low、moderate-（重要）"><a href="#vulnerabilities-high、low、moderate-（重要）" class="headerlink" title="vulnerabilities(high、low、moderate)（重要）"></a>vulnerabilities(high、low、moderate)（重要）</h3><hr><p>vulnerability是漏洞的意思，这个提示有点类似系统漏洞，甚至解决办法也有点类似（按以前对于电脑管家提示的系统漏洞我们的态度，不管就是了，高危漏洞也不管 ）。<br>当然我们怎么可能放着漏洞不去解决呢，而且npm还给出了操作建议：</p><pre class=" language-bash"><code class="language-bash">found 4 vulnerabilities <span class="token punctuation">(</span>1 low, 3 high<span class="token punctuation">)</span>  run <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> audit fix<span class="token variable">`</span></span> to fix them, or <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> audit<span class="token variable">`</span></span> <span class="token keyword">for</span> details</code></pre><p>audit是审查的意思，前面这个指令应该是自动修复的意思，带有可能性，你有不小的概率执行完，仍然解决不了问题，然后遇到npm给的新的建议：</p><pre class=" language-bash"><code class="language-bash">fixed 0 of 4 vulnerabilities <span class="token keyword">in</span> 7193 scanned packages  4 vulnerabilities required manual review and could not be updated</code></pre><p>这是让你人工解决了，自动修复也无能为力。当然在执行完<code>npm audit fix</code>你还可能会遇到这样的提示：“问题没解决，不过你可以使用<code>npm audit fix --force</code>进行尝试。”这是让你执行强制修复命令试试，到这一步，我的建议是绝对别用这个强制命令，执行完直接报错ERROR的可能性非常大，反正我一直是执行完直接报错的。<br>遇到这个漏洞问题，最好是执行<code>npm audit</code>进行漏洞审查，此时命令行会给出一个报告，具体说明漏洞详情，如下所示：</p><pre class=" language-bash"><code class="language-bash">                       <span class="token operator">==</span><span class="token operator">=</span> <span class="token function">npm</span> audit security report <span class="token operator">==</span><span class="token operator">=</span>                                 Manual Review             Some vulnerabilities require your attention to resolve          Visit https://go.npm.me/audit-guide <span class="token keyword">for</span> additional guidance  Low             Prototype Pollution  Package         lodash  Patched <span class="token keyword">in</span>      <span class="token operator">>=</span>4.17.5  Dependency of   hexo-toc  Path            hexo-toc <span class="token operator">></span> cheerio <span class="token operator">></span> lodash  More info       https://npmjs.com/advisories/577  High            Prototype Pollution  Package         lodash  Patched <span class="token keyword">in</span>      <span class="token operator">>=</span>4.17.11  Dependency of   hexo-toc  Path            hexo-toc <span class="token operator">></span> cheerio <span class="token operator">></span> lodash  More info       https://npmjs.com/advisories/782</code></pre><p>这里我只截取了一部分，可以看到npm audit提供的报告还是很详细的。我这里原因是<strong>原型污染漏洞</strong>，因为这个漏洞的存在，攻击者可以使我的web应用程序崩溃或改变行为（如数据丢失、服务中断、对敏感信息的未授权访问或其他问题），<a href="https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities" target="_blank" rel="noopener">npm文档（auditing-package-dependencies-for-security-vulnerabilities）</a>对问题描述与解决办法有着更详尽的说明。当然，这要求攻击者熟悉每个web应用程序的工作方式，并且能够修改JavaScript对象原型。我这连访问量都特么没有，谁来攻击我，所以其实可以忽略。<br>有的情况下，在报告开头处，会给出一个建议的解决办法，比如建议你执行哪条命令去安装个什么，有这样的建议命令最好就执行一下，一般可以解决其中的几个漏洞。如题所示。<br><img src="npm_recommended_commands.png" alt="npm recommended commands"><br>如果没有解决，或者这几个漏洞也没有给出建议解决办法，比如我这个情况，那么就根据报告，发现其实是包的版本太低所导致的，这里就引出了如何更新指定位置包的问题，例如上文显示的<code>lodash</code>包，如果你直接使用<code>npm install lodash@4.17.11 --save</code>命令去安装指定版本的包，你会发现你其实并没有装到那个目录下，比如按照audit报告你需要安装到<code>hexo-toc &gt; cheerio &gt; lodash</code>下，但是你其实装到了<code>hexo-toc</code>下，并且在hexo-toc目录下的<code>package.json</code>或<code>package-lock.json</code>下还添加了新的依赖配置（由–save这个flag所导致的），这时在命令行里执行：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> list lodash</code></pre><p>你就可以看到这个包的完整安装情况，list可以简写为 ls 或 la 或 ll 。如图所示：<br><img src="npm_list_lodash.png" alt="npm list lodash"><br>这里依赖后跟的<strong>deduped、extraneous、missing或invalid</strong>分别是指<strong>重复数据可删除、无关软件包（未在父软件包的依赖项列表中列出）、软件包丢失、软件包无效</strong>，对于deduped软件包，可以使用如下的命令示例进行简化软件包树：<br><img src="npm_dedupe.png" alt="npm dedupe"><br>对于extraneous软件包，可以使用<code>npm prune [[&lt;@scope&gt;/]&lt;pkg&gt;...] [--production] [--dry-run] [--json]</code>去移除无关软件包，具体说明见<a href="https://docs.npmjs.com/cli-commands/prune.html" target="_blank" rel="noopener">npm prune</a>。当然，deduped与extraneous软件包并不会影响正常使用，你其实不管也是可以的。<br>而对于missing与invalid的处理就不能不管了，missing软件包是指你的依赖项列表中包含，但是父目录下的<code>node_modules</code>文件夹下却没有这个软件包，一般情况是你直接找到了这个包，然后把它删了，就会出现这种情况，这时我们只需要在命令行里执行<code>npm install</code>即可重新安装。对于invalid的软件包，你可以找到文件位置，把这个包的文件夹删了，然后执行上述步骤即可。<br>那么我们既然已经知道直接执行<code>npm install &lt;pkg&gt;@&lt;version&gt;</code>不行，那么要如何解决呢？这时，我们就需要更改所有不符合版本要求的子软件包的父软件包的依赖项列表中所配置的对应子软件包版本号，又或干脆在依赖项列表中删去子软件包，如下所示：</p><pre><code>{  &quot;name&quot;: &quot;hexo-site&quot;,  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;private&quot;: true,  &quot;hexo&quot;: {    &quot;version&quot;: &quot;3.9.0&quot;  },  &quot;dependencies&quot;: {    &quot;@upupming/hexo-renderer-markdown-it-plus&quot;: &quot;^2.0.2&quot;,    &quot;coffeescript&quot;: &quot;^2.5.1&quot;,    &quot;core-js&quot;: &quot;^3.6.4&quot;,    &quot;ejs&quot;: &quot;^3.0.1&quot;,    &quot;hexo&quot;: &quot;^3.2.0&quot;,    &quot;hexo-deployer-git&quot;: &quot;^2.1.0&quot;,    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,    &quot;hexo-generator-seo-friendly-sitemap&quot;: &quot;0.0.25&quot;,    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,    &quot;hexo-server&quot;: &quot;^0.2.0&quot;,    &quot;hexo-toc&quot;: &quot;^1.1.0&quot;  }}</code></pre><p>这是我的博客根目录下的<code>package.json</code>下的代码，dependencies后就是依赖项列表，但是，一般出问题不会出在这些依赖项上，都是这些依赖的子依赖甚至子子依赖会出现问题，这就需要按照npm audit提示目录，例如<code>hexo-toc &gt; cheerio &gt; lodash</code>，在根目录下的<code>node_modules</code>文件夹内找到/hexo-toc/node_modules/cheerio/package.json文件，修改依赖项列表。<br>但是这样做完依旧不行，因为安装某些软件包尤其是子软件包时<strong>–save</strong>的存在，会导致npm将这个软件包添加到根目录下的<code>package-lock.json</code>文件的依赖项列表中，如果你的操作很冗杂，那么这个文件的依赖项列表将会非常的乱，非常的多，需要你全部修改正确。修改完成之后，把之前有问题的软件包文件夹全删了，回到根目录执行:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>就可以解决问题，值得一提的是，按照npm audit给出的报告，有软件包的描述地址，这里有软件包的描述与版本更新情况，我们在设置依赖项列表的软件包版本号时，最好是符合最低要求即可，不要追求最新版，原因之前也已经提过。</p><h3 id="npm-一键解决依赖问题"><a href="#npm-一键解决依赖问题" class="headerlink" title="npm 一键解决依赖问题"></a>npm 一键解决依赖问题</h3><hr><p>上述办法的确能解决问题，我也是查了很久才得到这么些个办法，但是，我们说依赖安装产生问题，很多时候其实是我们看了太多教程，进行了太多错误、冗余的操作命令，而导致依赖树逻辑产生问题，如果你不愿意去修改各种文件夹下的<code>package(-lock).json</code>文件，你可以这样去做：</p><ul><li>回到根目录，保留根目录下的<code>package.json</code>文件</li><li>把根目录下的<code>node_modules</code>文件夹和<code>package-lock.json</code>文件都删了</li><li>在根目录下重新执行<code>npm install</code><br>这时候如果你有什么误操作，这时候基本都修正了，唯一不会被修正的是，vulnerabilities的版本过低，事实上，我提高了版本以后，反而出现了新的问题，导致我的博客generate都过不了，如图：<br><img src="TypeError_Cannot_read_property_children_of_undefined.png" alt="TypeError:Cannot read property &#39;children&#39; of undefined"><br>我认为这就是版本提升带来的问题，具体是什么我也没搞明白，留待后续补充吧。所以我这里的几个vulnerabilities就没管，问题也不大。<blockquote><p>PS：根据 <a href="https://hexo.io/news/" target="_blank" rel="noopener">Hexo官网新闻</a>，我很高兴地看到从最新版的Hexo 4.2起，Hexo已经移除了cheerio与Lodash，并分别用native API与native JaveScript替代，果然我查看了一下我的版本，我是<a href="mailto:hexo@3.9.0" target="_blank" rel="noopener">hexo@3.9.0</a>，hexo-cli@3.1.0，我还在用这些被人家drop了的东西，我活该有vulnerabilities。</p></blockquote></li></ul><h3 id="npm-fund"><a href="#npm-fund" class="headerlink" title="npm fund"></a>npm fund</h3><hr><p>这个不是啥问题，讲道理，我第一次知道这东西的时候都惊了，这路子真野！</p><pre class=" language-bash"><code class="language-bash">………………up to <span class="token function">date</span> <span class="token keyword">in</span> 27.993s6 packages are looking <span class="token keyword">for</span> funding  run <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> fund<span class="token variable">`</span></span> <span class="token keyword">for</span> details</code></pre><p>这是在说有6个软件包（的所有者）在寻求资助。执行<code>npm fund</code>则会以类似audit报告的方式，列出这些软件包，以及资助网站。</p><blockquote><p>PS：虽然咱是开源，但是大家也行行好吧~</p></blockquote><p><img src="npm_fund.png" alt="npm fund"><br>安装过程中也会出类似的东西，不过我很纳闷，装这软件包的不都是搬运工们吗？求职发到这来，哪个老板能看到…………</p><h2 id="Hexo添加数学公式渲染"><a href="#Hexo添加数学公式渲染" class="headerlink" title="Hexo添加数学公式渲染"></a>Hexo添加数学公式渲染</h2><hr><p>讲道理Hexo这东西确实有够自由的，自由==一无所有，这是在让人无法不踩坑。<br>每位博主都会说，“谁写博客还不整点公式呢？”然后开始了添加公式渲染插件教学。<br>对啊！谁写博客还不整点公式呢？？虽然我这第一篇博客是静态网页踩坑记录，但是这不妨碍我这个博客是一个嵌入式、机器人与控制理论专题博客（傻笑），那能离得开数学公式吗？嗯？<br>网上的方法那真是过江之鲫啊，可能是我这个主题有毛病，或者我的操作问题（可能当时我还在解决lodash的问题），反正很多配置Mathjax的方法我这都存在安装问题，最终我还是选择了KaTeX，不过最近网友的评价让我对KaTeX感到欣慰，它已经是能独当一面的渲染方案了！</p><ul><li>Compare Mathjax VS KaTeX<ul><li>Mathjax<ul><li>优点<ul><li>1.对<code>Latex</code>语法支持全面</li><li>2.Next主题对其支持比较好有优化，单行过长时会置于容器内，手机体验良好（可惜我不用）</li><li>3.中文不会出现字符警告</li></ul></li><li>缺点<ul><li>1.需要页面js加载渲染</li><li>2.kramed渲染器对内联公式的转义字符<code>\</code>支持不好</li></ul></li></ul></li><li>KaTeX<ul><li>优点<ul><li>1.页面加载极快<a href="https://www.intmath.com/cg5/katex-mathjax-comparison.php" target="_blank" rel="noopener">对比网站</a></li><li>2.渲染器效果好，相对于kramed对Mathjax的内联公式</li></ul></li><li>缺点<ul><li>1.Next主题对其优化较差，单行过长页面会出现位移（幸亏我不用）</li><li>2.渲染.md时，若出现中文字符会弹出大量警告 （我们是在意警告的人嘛）</li><li>3.会严重影响Hexo渲染速度（不能说自己太快）<br>看了从网上找的二者比较（括号是我写的），包括据说现在KaTeX大部分符号都支持了，与Mathjax非常接近，再加上KaTeX的加载公式速度明显比Mathjax方式高许多，我就安心的找起了配置KaTeX的方法。</li></ul></li></ul></li></ul></li></ul><h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><hr><p>首先，渲染器我们不使用默认的hexo-renderer-marked，也不使用hexo-renderer-kramed，也不适用默认加hexo-math插件的方式，这几种都需要更改渲染引擎的js脚本，保证转义字符与数学公式的渲染不会出现混乱。我尝试了但没有成功（后来觉得应该是没添加cdn的原因），不论如何，我现在的情况就挺不错。</p><ul><li>卸载默认渲染器hexo-renderer-marked并修改依赖项列表<pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> uninstall hexo-renderer-marked --save</code></pre></li><li>安装新的渲染器<strong>hexo-renderer-markdown-it-plus</strong>，但是这东西又没人维护了，所以我们使用 @upupming/hexo-renderer-markdown-it-plus。这份 fork 的代码使用了@neilsustc/markdown-it-katex（<em>事实上我发现这个也不是neilsustc本人的repo，而是yzhang-gh从waylonflinn那里fork来的，最近还在维护，KeTaX的版本更新到0.10.0，而官方KeTaX版本已经到了0.11.1，暂时还没什么影响，我还没具体开始写数学公式</em>），同时它也是 VSCode 的插件 <a href="https://github.com/yzhang-gh/vscode-markdown" target="_blank" rel="noopener">Markdown All in One</a>所使用的（这个all in one就是yzhang-gh做的），所以我们可以获得新的 KaTex 功能例如 \tag{}。<pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> @upupming/hexo-renderer-markdown-it-plus --save</code></pre></li><li>然后修改<code>_config.yml</code>，增加数学公式配置：<pre><code>math:#engine: mathjaxengine: katex</code></pre></li></ul><h1 id="Markdown-it-plus-config"><a href="#Markdown-it-plus-config" class="headerlink" title="Markdown-it-plus config"></a>Markdown-it-plus config</h1><p>markdown_it_plus:<br>  highlight: true<br>  html: true<br>  xhtmlOut: false<br>  breaks: true<br>  langPrefix:<br>  linkify: true<br>  typographer:<br>  quotes: “”‘’<br>  pre_class: highlight<br>  plugins:<br>    - plugin:<br>      name: ‘@neilsustc/markdown-it-katex’<br>      enable: true<br>      options:<br>        strict: false</p><pre><code>然后添加CDN，这里正确做法是找到根目录下`node_modules`下`@neilsustc/markdown-it-katex`的README，因为从markdown-it-plus 2.0.0开始，以[markdown-it-katex](https://github.com/yzhang-gh/markdown-it-katex)为数学公式渲染引擎，东西得配套嘛，CDN也得照这个来。在这个README下我们可以看到：* Use it in your javascript```javascriptvar md = require(&#39;markdown-it&#39;)(),    mk = require(&#39;@neilsustc/markdown-it-katex&#39;);md.use(mk);// double backslash is required for javascript strings, but not html inputvar result = md.render(&#39;# Math Rulez! \n  $\\sqrt{3x-1}+(1+x)^2$&#39;);</code></pre><ul><li>Include the KaTeX stylesheet in your html:<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li>If you’re using the default markdown-it parser, I also recommend the <a href="https://github.com/sindresorhus/github-markdown-css" target="_blank" rel="noopener">github stylesheet</a>:<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/github-markdown-css/2.2.1/github-markdown.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><blockquote><p>照这个来，把所说的stylesheet这一条代码，加到主题目录下的<code>/layout/_partial/head.ejs</code>内即可。</p></blockquote></li></ul><p>这里我参照了我根目录下<code>node_modules</code>下的一个依赖<code>katex</code>，这个是官方软件包，我这里版本为0.10.2，与上面的区别不大，可能有影响，但目前我还没遇到。这里的README提供了更为完整的一个template：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token comment" spellcheck="true">&lt;!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-yFRtMMDnQtDRO8rLpMIKrtPCD5jdktao2TV19YiZYWMDkUR5GQZR/NOVTdquEx1j<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- The loading of KaTeX is deferred to speed up page rendering --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-9Nhn55MVVN0/4OFx7EE5kpFBPsEMZxKTCnA+4fqDmg12eCTqGi6+BB2LjY8brQxJ<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- To automatically render math in text elements, include the auto-render extension: --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/auto-render.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span>        <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderMathInElement(document.body);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>如果想要加入自动渲染扩展，可以参考<a href="https://katex.org/docs/autorender.html" target="_blank" rel="noopener">Auto-render Extension</a>。</p><blockquote><p>到这里数学公式渲染插件就添加完毕了，下面是一个简单的测试，如果我遇到了问题，我还会再来补充配置办法的。</p></blockquote><p>转义及数学公式测试<br>$ hh $ hh  $$ hh $$<br>$<br>$$<br>$$<br>f(x) = \int_{-\infty}^{\infty}\hat f(\xi),e^{2\pi i \xi x},d\xi<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] Theme BeanTech</title>
      <link href="/2020/02/09/hexo-theme-beantech/"/>
      <url>/2020/02/09/hexo-theme-beantech/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是原主题移植者的Readme，这里保留下来，有需要的自行取用。</p><p>Ported Theme of <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Hux Blog</a>, Thank <a href="https://github.com/Huxpro" target="_blank" rel="noopener">Huxpro</a> for designing such a flawless theme.<br>This BeanTech theme created by <a href="http://beantech.org" target="_blank" rel="noopener">YuHsuan</a> modified from the original Porter <a href="http://kaijun.rocks/hexo-theme-huxblog/" target="_blank" rel="noopener">Kaijun</a></p></blockquote><h1 id="Live-Demo"><a href="#Live-Demo" class="headerlink" title="Live Demo"></a><a href="http://beantech.org" target="_blank" rel="noopener">Live Demo</a></h1><hr><p><img src="http://beantech.org/img/beantech-desktop.png" alt="BeanTech Desktop"></p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><hr><p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p><p>Let’s begin!!!</p><h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><hr><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech<span class="token function">cd</span> hexo-beantech<span class="token function">npm</span> <span class="token function">install</span></code></pre><h2 id="Modify"><a href="#Modify" class="headerlink" title="Modify"></a>Modify</h2><hr><p>Modify <code>_config.yml</code> file with your own info.<br>Especially the section:</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Replace to your own repo!</p><pre class=" language-yml"><code class="language-yml">deploy:  type: git  repo: https://github.com/<yourAccount>/<repo>  branch: <your-branch></code></pre><h3 id="Sidebar-settings"><a href="#Sidebar-settings" class="headerlink" title="Sidebar settings"></a>Sidebar settings</h3><p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p><pre class=" language-yml"><code class="language-yml">sidebar: true    # whether or not using Sidebar.sidebar-about-description: "<your description>"sidebar-avatar: img/<your avatar path></code></pre><p>and activate your personal widget you like</p><pre class=" language-yml"><code class="language-yml">widgets:         # here are widget you can use, you can comment out- featured-tags- short-about- recent-posts- friends-blog- archive- category</code></pre><p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p><h3 id="Signature-Setup"><a href="#Signature-Setup" class="headerlink" title="Signature Setup"></a>Signature Setup</h3><p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p><pre class=" language-yml"><code class="language-yml">signature: true   # show signaturesignature-img: img/signature/<your-signature-ID></code></pre><h3 id="Go-to-top-icon-Setup"><a href="#Go-to-top-icon-Setup" class="headerlink" title="Go to top icon Setup"></a>Go to top icon Setup</h3><p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p><h3 id="Post-tag"><a href="#Post-tag" class="headerlink" title="Post tag"></a>Post tag</h3><p>You can decide to show post tags or not.</p><pre class=" language-yml"><code class="language-yml">home_posts_tag: true</code></pre><p><img src="home_posts_tag-true.png" alt="home_posts_tag-true"></p><pre class=" language-yml"><code class="language-yml">home_posts_tag: false</code></pre><p><img src="home_posts_tag-false.png" alt="home_posts_tag-false"></p><h3 id="Markdown-render"><a href="#Markdown-render" class="headerlink" title="Markdown render"></a>Markdown render</h3><p>My markdown render engine plugin is <a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="noopener">hexo-renderer-markdown-it</a>.</p><pre class=" language-yml"><code class="language-yml"># Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown:  render:    html: true    xhtmlOut: false    breaks: true    linkify: true    typographer: true    quotes: '“”‘’'</code></pre><p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token string">"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        anchors<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span>          visible<span class="token punctuation">:</span> <span class="token string">'hover'</span><span class="token punctuation">,</span>          placement<span class="token punctuation">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>          icon<span class="token punctuation">:</span> ℬ <span class="token comment" spellcheck="true">// this is the header anchor "unicode" icon</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Hexo-Basics"><a href="#Hexo-Basics" class="headerlink" title="Hexo Basics"></a>Hexo Basics</h2><hr><p>Some hexo command:</p><pre class=" language-bash"><code class="language-bash">hexo new post <span class="token string">"&lt;post name>"</span> <span class="token comment" spellcheck="true"># you can change post to another layout if you want</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo generate <span class="token comment" spellcheck="true"># generate the static file</span>hexo server <span class="token comment" spellcheck="true"># run hexo in local environment</span>hexo deploy <span class="token comment" spellcheck="true"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></code></pre><h1 id="Have-fun"><a href="#Have-fun" class="headerlink" title="Have fun ^_^"></a>Have fun ^_^</h1><hr><!-- Place this tag in your head or just before your close body tag. --><script async defer src="https://buttons.github.io/buttons.js"></script><!-- Place this tag where you want the button to render. --><p>Please <a class="github-button" href="https://github.com/YenYuHsuan/hexo-theme-beantech" data-icon="octicon-star" aria-label="Star YenYuHsuan/hexo-theme-beantech on GitHub" target="_blank" rel="noopener">Star</a> this Project if you like it! <a class="github-button" href="https://github.com/YenYuHsuan" aria-label="Follow @YenYuHsuan on GitHub" target="_blank" rel="noopener">Follow</a> would also be appreciated!<br>Peace!</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
